document.addEventListener("DOMContentLoaded", function () {
  // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
  const timerElement = document.getElementById("timer");
  const startButton = document.querySelector(".btn_timer");
  const questionElement = document.getElementById("question");
  const answerInput = document.getElementById("answer");
  const answerButton = document.querySelector(".btn_praxis");
  const resultIcon = document.getElementById("resultIcon");
  const rightAnswersElement = document.getElementById("result_right");
  const wrongAnswersElement = document.getElementById("result_wrong");
  const resultTextElement = document.getElementById("text_result");
  const imageContainer = document.getElementById("image");
  const mistakesContainer = document.getElementById("mistakes-container");
  const mistakesList = document.getElementById("mistakes-list");
  const modeTitleElement = document.querySelector(".h2"); // –î–æ–±–∞–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞

  // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã
  let currentMode = "multiplication";
  let currentAnswer;
  let isTimerRunning = false;
  let timerInterval;
  let timeLeft = 60;
  let mistakes = [];

  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞
  function updateModeTitle() {
    switch (currentMode) {
      case "multiplication":
        modeTitleElement.textContent = "–¢—Ä–µ–Ω–∞–∂—ë—Ä —É–º–Ω–æ–∂–µ–Ω–∏—è";
        break;
      case "division":
        modeTitleElement.textContent = "–¢—Ä–µ–Ω–∞–∂—ë—Ä –¥–µ–ª–µ–Ω–∏—è";
        break;
      case "mixed":
        modeTitleElement.textContent = "–°–º–µ—à–∞–Ω–Ω—ã–π —Ç—Ä–µ–Ω–∞–∂—ë—Ä";
        break;
      default:
        modeTitleElement.textContent = "–¢—Ä–µ–Ω–∞–∂—ë—Ä —Ç–∞–±–ª–∏—Ü—ã —É–º–Ω–æ–∂–µ–Ω–∏—è";
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–∂–∏–º–æ–≤
  document.querySelectorAll(".mode-btn").forEach((btn) => {
    btn.addEventListener("click", function () {
      currentMode = this.dataset.mode;
      document.querySelectorAll(".mode-btn").forEach((b) => {
        b.classList.toggle("active", b.dataset.mode === currentMode);
      });
      updateModeTitle(); // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞
      resetGame();
    });
  });

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞
  function generateQuestion() {
    const num1 = Math.floor(Math.random() * 9) + 1;
    const num2 = Math.floor(Math.random() * 9) + 1;

    if (currentMode === "division") {
      const product = num1 * num2;
      return {
        question: `${product} √∑ ${num1} =`,
        answer: num2,
      };
    }

    if (currentMode === "mixed") {
      return Math.random() > 0.5
        ? { question: `${num1} √ó ${num2} =`, answer: num1 * num2 }
        : { question: `${num1 * num2} √∑ ${num1} =`, answer: num2 };
    }

    return {
      question: `${num1} √ó ${num2} =`,
      answer: num1 * num2,
    };
  }

  // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
  function startGame() {
    if (isTimerRunning) return;

    resetGame();
    isTimerRunning = true;
    timeLeft = 60;

    // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç–∞
    const existingBtn = timerElement.parentNode.querySelector(".btn_timer");
    if (existingBtn) {
      existingBtn.remove();
    }

    updateTimerDisplay();
    showQuestion();
    startTimer();
  }

  // –¢–∞–π–º–µ—Ä
  function startTimer() {
    clearInterval(timerInterval);
    timerInterval = setInterval(() => {
      timeLeft--;
      updateTimerDisplay();

      if (timeLeft <= 0) {
        endGame();
      }
    }, 1000);
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
  function updateTimerDisplay() {
    const minutes = Math.floor(timeLeft / 60);
    const seconds = timeLeft % 60;
    timerElement.textContent = `${minutes}:${
      seconds < 10 ? "0" : ""
    }${seconds}`;
  }

  // –ü–æ–∫–∞–∑ –≤–æ–ø—Ä–æ—Å–∞
  function showQuestion() {
    const { question, answer } = generateQuestion();
    questionElement.textContent = question;
    currentAnswer = answer;
    answerInput.value = "";
    resultIcon.textContent = "";
    answerInput.focus();
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
  function checkAnswer() {
    if (!isTimerRunning) return;

    const userAnswer = answerInput.value.trim();

    if (!userAnswer) {
      resultIcon.textContent = "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç!";
      resultIcon.style.color = "red";
      return;
    }

    const answerNum = parseInt(userAnswer);
    const isCorrect = answerNum === currentAnswer;

    if (isCorrect) {
      rightAnswersElement.textContent =
        parseInt(rightAnswersElement.textContent) + 1;
      resultIcon.textContent = "‚úîÔ∏è";
      resultIcon.style.color = "green";
    } else {
      wrongAnswersElement.textContent =
        parseInt(wrongAnswersElement.textContent) + 1;
      mistakes.push({
        question: questionElement.textContent,
        userAnswer: answerNum,
        correctAnswer: currentAnswer,
      });
      resultIcon.textContent = "‚ùå";
      resultIcon.style.color = "red";
    }

    setTimeout(showQuestion, 500);
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
  function endGame() {
    clearInterval(timerInterval);
    isTimerRunning = false;

    // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤–≤–æ–¥
    answerButton.disabled = true;
    answerInput.disabled = true;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    showResults();

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞"
    const restartBtn = document.createElement("button");
    restartBtn.className = "btn_timer";
    restartBtn.innerHTML =
      "<span></span><span></span><span></span><span></span>–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞";
    restartBtn.addEventListener("click", startGame);

    timerElement.innerHTML = "–í—Ä–µ–º—è –≤—ã—à–ª–æ! ";
    timerElement.appendChild(restartBtn);
    timerElement.style.color = "red";
  }

  // –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  function showResults() {
    const total =
      parseInt(rightAnswersElement.textContent) +
      parseInt(wrongAnswersElement.textContent);
    resultTextElement.textContent = `–†–µ–∑—É–ª—å—Ç–∞—Ç: ${rightAnswersElement.textContent} –∏–∑ ${total}`;
    resultTextElement.style.color = "red";

    // –î–ª—è –¥–µ—Å–∫—Ç–æ–ø–æ–≤
    if (window.innerWidth > 768) {
      if (imageContainer) imageContainer.style.display = "none";
      if (mistakesContainer) mistakesContainer.classList.add("visible");
    }
    // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    else {
      const mobileMistakes = document.getElementById(
        "mobile-mistakes-container"
      );
      if (!mobileMistakes) {
        createMobileMistakesContainer();
      }
      document
        .getElementById("mobile-mistakes-container")
        .classList.add("visible");
    }

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫
    const list =
      window.innerWidth > 768
        ? mistakesList
        : document.getElementById("mobile-mistakes-list");
    list.innerHTML =
      mistakes.length > 0
        ? mistakes
            .map(
              (mistake, i) => `
              <div class="mistake-item">
                  <strong>${i + 1}.</strong> ${mistake.question}<br>
                  –í–∞—à –æ—Ç–≤–µ—Ç: <span style="color:red">${
                    mistake.userAnswer
                  }</span><br>
                  –ü—Ä–∞–≤–∏–ª—å–Ω–æ: <span style="color:green">${
                    mistake.correctAnswer
                  }</span>
              </div>
          `
            )
            .join("")
        : "<p>–í—ã –Ω–µ —Å–¥–µ–ª–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –æ—à–∏–±–∫–∏! üëç</p>";
  }

  // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—à–∏–±–æ–∫ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
  function createMobileMistakesContainer() {
    const container = document.createElement("div");
    container.id = "mobile-mistakes-container";
    container.innerHTML = `
          <h3>–û—à–∏–±–∫–∏:</h3>
          <div id="mobile-mistakes-list"></div>
      `;
    document.querySelector("#left").appendChild(container);
  }

  // –°–±—Ä–æ—Å –∏–≥—Ä—ã
  function resetGame() {
    clearInterval(timerInterval);
    isTimerRunning = false;
    timeLeft = 60;
    mistakes = [];

    // –°–±—Ä–æ—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    timerElement.innerHTML = "01:00";

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    const existingBtn = timerElement.parentNode.querySelector(".btn_timer");
    if (existingBtn) {
      existingBtn.remove();
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É
    const newStartBtn = startButton.cloneNode(true);
    timerElement.parentNode.appendChild(newStartBtn);
    newStartBtn.addEventListener("click", startGame);

    // –û—Å—Ç–∞–ª—å–Ω–æ–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    questionElement.textContent = "";
    answerInput.value = "";
    resultIcon.textContent = "";
    rightAnswersElement.textContent = "0";
    wrongAnswersElement.textContent = "0";
    resultTextElement.textContent = "";
    answerButton.disabled = false;
    answerInput.disabled = false;
    timerElement.style.color = "";

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞)
    if (window.innerWidth > 768 && imageContainer) {
      imageContainer.style.display = "block";
    }
    if (mistakesContainer) {
      mistakesContainer.classList.remove("visible");
    }

    // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –æ—à–∏–±–∫–∞–º–∏
    const mobileMistakes = document.getElementById("mobile-mistakes-container");
    if (mobileMistakes) {
      mobileMistakes.classList.remove("visible");
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
  updateModeTitle(); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  startButton.addEventListener("click", startGame);
  answerButton.addEventListener("click", checkAnswer);
  answerInput.addEventListener("keydown", (e) => {
    if (e.key === "Enter") checkAnswer();
  });
});
